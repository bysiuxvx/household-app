generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Household {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members UserOnHousehold[]
  lists   List[]

  @@map("Household")
}

model User {
  id             String      @id // Clerk User ID
  email          String      @unique
  name           String?
  username       String?     @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  households     UserOnHousehold[]
  createdItems   ListItem[]  @relation("ListItemCreator")
  completedItems ListItem[]  @relation("ListItemCompleter")
  createdLists   List[]      @relation("ListCreator")
  
  @@map("User")
}

// relationship table between User and Household
model UserOnHousehold {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  householdId String
  role        UserRole  @default(MEMBER)
  joinedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, householdId])
  @@index([userId], name: "UserOnHousehold_userId_idx")
  @@index([householdId], name: "UserOnHousehold_householdId_idx")
  @@map("UserOnHousehold")
}

model List {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        ListType @default(TODO)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  householdId String
  createdBy   User      @relation("ListCreator", fields: [createdById], references: [id])
  createdById String
  items       ListItem[]

  @@index([householdId], name: "List_householdId_idx")
  @@index([createdById], name: "List_createdById_idx")
  @@map("List")
}

model ListItem {
  id          String   @id @default(uuid())
  text        String
  description String?
  completed   Boolean  @default(false)
  completedAt DateTime?
  priority    Priority?
  dueDate     DateTime?
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  createdBy   User     @relation("ListItemCreator", fields: [createdById], references: [id])
  createdById String
  completedBy User?    @relation("ListItemCompleter", fields: [completedById], references: [id])
  completedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([listId])
  @@map("ListItem")
}

enum ListType {
  TODO
  SHOPPING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  ADMIN
  MEMBER
}
